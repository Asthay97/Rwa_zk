import {
  ButtonBase,
  getShade,
  jsx$2,
  styled$1$1
} from "./chunk-7IW56RFF.js";
import "./chunk-KXN6UPOS.js";
import "./chunk-HK53COTT.js";
import "./chunk-26MKVK2D.js";
import "./chunk-RGPF5E5U.js";
import "./chunk-HP2ZKEXX.js";
import "./chunk-W4Y45IMK.js";
import "./chunk-KY7BYEEG.js";
import "./chunk-Q2Y7HMGG.js";
import "./chunk-HBISWFAK.js";
import "./chunk-ZCJM6YQY.js";
import "./chunk-DPVQT5CK.js";
import "./chunk-VZJAAG7F.js";
import "./chunk-7E2INFKZ.js";
import "./chunk-VUTNETB2.js";
import "./chunk-CGUI5JNX.js";
import "./chunk-LOXFU2CX.js";
import "./chunk-ZNECZODT.js";
import {
  require_react
} from "./chunk-Y7G3URSV.js";
import {
  __toESM
} from "./chunk-W7S2ME4R.js";

// node_modules/web3uikit/dist/ButtonCustom2.js
var import_react = __toESM(require_react());
var ButtonCustomStyled$1 = styled$1$1(ButtonBase)`
    background-color: ${(p) => {
  var _a;
  return (_a = p.customize) == null ? void 0 : _a.backgroundColor;
}};

    span {
        color: ${(p) => {
  var _a;
  return (_a = p.customize) == null ? void 0 : _a.textColor;
}};
        font-size: ${(p) => {
  var _a;
  return ((_a = p.customize) == null ? void 0 : _a.fontSize) + "px";
}};
    }

    svg {
        fill: ${(p) => {
  var _a;
  return (_a = p.customize) == null ? void 0 : _a.textColor;
}};
    }

    :after {
        background-color: transparent;
        content: '';
        display: block;
        height: 100%;
        left: 0;
        pointer-events: none;
        position: absolute;
        top: 0;
        transition: all 0.3s ease;
        width: 100%;
        z-index: 0;
    }

    :hover {
        background-color: ${(p) => {
  var _a;
  return (_a = p.customize) == null ? void 0 : _a.backgroundColor;
}};

        :after {
            background-color: ${(p) => {
  var _a;
  return ((_a = p.customize) == null ? void 0 : _a.onHover) === "lighten" ? getShade("light", 20) : getShade("dark", 20);
}};
        }
    }

    :active {
        :after {
            background-color: ${(p) => {
  var _a;
  return ((_a = p.customize) == null ? void 0 : _a.onHover) === "lighten" ? getShade("light", 40) : getShade("dark", 40);
}};
        }
    }
`;
var styles = {
  ButtonCustomStyled: ButtonCustomStyled$1
};
var {
  ButtonCustomStyled
} = styles;
var ButtonCustom = ({
  customize,
  ...props
}) => {
  return jsx$2(ButtonCustomStyled, {
    customize,
    ...props
  });
};
export {
  ButtonCustom as default
};
//# sourceMappingURL=ButtonCustom2-CQ265RZJ.js.map
